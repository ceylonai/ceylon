namespace ceylon {
  string version();
  [Async]
  void agent_runner_multi_thread(sequence<AgentCore> agents, string topic, bytes inputs, string workspace_id);
  [Async]
  void agent_run_single(AgentCore agent, string topic, bytes inputs, string workspace_id);
};


dictionary AgentDefinition{
    string? id;
    string name;
    string position;
    sequence<string> responsibilities;
    sequence<string> instructions;
    boolean is_leader;
};

dictionary AgentConfig{
    u16 memory_context_size = 10;
};

interface AgentCore{
    constructor(
        AgentDefinition definition,
        AgentConfig config,
        MessageHandler on_message,
        Processor? processor,
        AgentHandler agent_handler,
        record<EventType,sequence<EventHandler>>? event_handlers
    );

    string id();
    string workspace_id();
    AgentDefinition definition();

    [Async]
    void broadcast(bytes message);

    void log(string message);

    [Async]
    void start(string topic, u16 port,  bytes inputs);
};

 enum EventType {
    "OnAny",
    "OnMessage",
    "OnSubscribe",
    "OnUnsubscribe",
    "OnListen",
    "OnExpired",
    "OnDiscovered",
    "OnConnectionClosed",
    "OnConnectionEstablished",
};


enum MessageType{
    "Message",
    "Event",
};

dictionary Message{
    string id;
    bytes data;
    string message;
    u64 time;
    string sender;
    MessageType type;
    EventType event_type;
};

[Trait,WithForeign]
interface MessageHandler {
    [Async]
    void on_message(string agent_id,bytes message);
};

[Trait,WithForeign]
interface EventHandler {
    [Async]
    void on_event(Message message);
};

[Trait,WithForeign]
interface AgentHandler {
    [Async]
    void on_agent(AgentDefinition agent);
};

[Trait,WithForeign]
interface Processor {
    [Async]
    void run(bytes input);

    [Async]
    void on_start(bytes input);

};

dictionary WorkspaceConfig{
    string name;
    u16 port = 8888;
};

interface Workspace{
    constructor(sequence<AgentCore> agents,WorkspaceConfig config);

    [Async]
    void run(bytes input);
};