namespace ceylon {
  string version();
};


dictionary AgentDefinition{
    string name;
    string position;
    sequence<string> responsibilities;
    sequence<string> instructions;
    boolean is_leader;
};

interface AgentCore{
    constructor(AgentDefinition definition, MessageHandler on_message, Processor? processor,record<string,string>? meta, record<EventType,sequence<MessageHandler>>? event_handlers);

    string id();
    string workspace_id();
    AgentDefinition definition();

    [Async]
    void broadcast(bytes message, string? to, MessageType message_type);
    record<string,string> meta();

};

 enum EventType {
    "OnAny",
    "OnMessage",
    "OnSubscribe",
    "OnUnsubscribe",
    "OnListen",
    "OnExpired",
    "OnDiscovered",
    "OnConnectionClosed",
    "OnConnectionEstablished",
};


enum MessageType{
    "RequestMessage",
    "ResponseMessage",
    "InformationalMessage",
    "Event",
};

dictionary Message{
    bytes data;
    string message;
    u64 time;
    string originator;
    string originator_id;
    string? to_id;
    MessageType type;
    EventType event_type;
};

[Trait,WithForeign]
interface MessageHandler {
    [Async]
    void on_message(string agent_id,Message message);
};

[Trait,WithForeign]
interface Processor {
    [Async]
    void run(bytes input);
};

dictionary WorkspaceConfig{
    string name;
    string host = "/ip4/0.0.0.0/tcp/";
    u16 port = 8888;
};

interface Workspace{
    constructor(sequence<AgentCore> agents,WorkspaceConfig config);

    [Async]
    void run(bytes input);
};