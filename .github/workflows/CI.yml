name: CI

on:
  push:
    branches:
      - main
      - master
      - devops
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
    inputs:
      sha:
        description: Commit SHA
        type: string
      dry-run:
        description: Dry run
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.8'
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read

jobs:
  create-sdist:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [ceylon]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install uniffi-bindgen maturin
      - name: Create source distribution
        run: |
          cd bindings/ceylon
          maturin sdist --out ../../dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ matrix.package }}
          path: dist/*.tar.gz

  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64, x86, aarch64]
        exclude:
          - os: windows-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install uniffi-bindgen
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter -m bindings/ceylon/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.target }}
          path: dist/*.whl

  publish-to-pypi:
    needs: [create-sdist, build-wheels]
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') && !inputs.dry-run"
    permissions:
      id-token: write
    steps:
      - name: Download sdists and wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  publish-to-github:
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') && !inputs.dry-run"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist-ceylon
          path: dist
      - name: Get version from Cargo.toml
        id: version
        working-directory: bindings/ceylon
        run: |
          VERSION=$(grep -m 1 -oP 'version = "\K[^"]+' Cargo.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "$VERSION" == *"-"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub release
        id: github-release
        uses: release-drafter/release-drafter@v6
        with:
          name: Ceylon ${{ steps.version.outputs.version }}
          tag: v${{ steps.version.outputs.version }}
          version: ${{ steps.version.outputs.version }}
          prerelease: ${{ steps.version.outputs.is_prerelease }}
          commitish: ${{ inputs.sha || github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload sdist to GitHub release
        run: gh release upload ${{ steps.github-release.outputs.tag_name }} dist/*.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}