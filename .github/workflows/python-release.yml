name: Ceylon-Release

on:
  push:
    branches:
      - release
    tags:
      - 'v*'

permissions:
  contents: read

jobs:
  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-14
            target: aarch64
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Libs
        run: |
          pip install uniffi-bindgen
      - name: Build wheels - ${{ matrix.platform.target }}
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter -m bindings/ceylon/Cargo.toml
      - name: Install build wheel - ${{ matrix.platform.target }}
        run: |
          pip install --force-reinstall dist/ceylon*.whl
          cd ~ && python -c 'import ceylon'
      - name: Build wheels - universal2
        if: matrix.platform.target == 'x86_64'
        uses: PyO3/maturin-action@v1
        with:
          args: --release --universal2 --out dist -m bindings/ceylon/Cargo.toml
      - name: Install build wheel - universal2
        if: matrix.platform.target == 'x86_64'
        run: |
          pip install --force-reinstall dist/ceylon*_universal2.whl
          cd ~ && python -c 'import ceylon'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Install Libs
        run: |
          pip install uniffi-bindgen
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter -m bindings/ceylon/Cargo.toml
      - name: Install build wheel
        shell: bash
        run: |
          pip install --force-reinstall dist/ceylon*.whl
          cd ~ && python -c 'import ceylon'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Libs
        run: |
          pip install uniffi-bindgen
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --find-interpreter -m bindings/ceylon/Cargo.toml
      - name: Install build wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install --force-reinstall dist/ceylon*.whl
          cd ~ && python -c 'import ceylon'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          [
            { version: "3.8", abi: "cp38-cp38" },
            { version: "3.9", abi: "cp39-cp39" },
            { version: "3.10", abi: "cp310-cp310" },
            { version: "3.11", abi: "cp311-cp311" },
            { version: "3.12", abi: "cp312-cp312" },
          ]
        target: [aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v4
      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist -i python${{matrix.python.version}} -m bindings/ceylon/Cargo.toml
      - uses: uraimo/run-on-arch-action@v2.2.0
        if: matrix.target == 'aarch64' || matrix.target == 'armv7'
        name: Install build wheel
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt update -y
            apt install -y gcc musl-dev python3-dev
            apt install -y --no-install-recommends software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt update -y
            PYTHON=python${{ matrix.python.version }}
            apt install -y $PYTHON $PYTHON-distutils $PYTHON-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python.version }}
            $PYTHON --version
            $PYTHON -m venv venv
            source venv/bin/activate
            pip install --upgrade pip setuptools wheel
            pip install --force-reinstall /artifacts/ceylon*.whl
            cd ~ && python -c 'import ceylon'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist -m bindings/ceylon/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [macos, windows, linux, linux-cross, sdist]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *