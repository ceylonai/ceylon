# This file is autogenerated by maturin v1.5.1
# To update, run
#
#    maturin generate-ci github
#
name: Ceylon-Release

on:
  push:
    branches:
      - main
      - master
      - devops
      - release
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    if: "startsWith(github.ref, 'refs/tags/')"
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
        python-version: [ '3.8', '3.9', '3.10', '3.11','3.12' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Libs
        run: |
          pip install uniffi-bindgen 
          pip install maturin
      - name: Change Directory
        run: cd bindings/ceylon
      - name: Build
        run: maturin build --release --out dist --find-interpreter -m bindings/ceylon/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-py${{ matrix.python-version }}
          path: dist

  windows:
    if: "startsWith(github.ref, 'refs/tags/')"
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
        python-version: [ '3.8', '3.9', '3.10', '3.11','3.12' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.target }}
      - name: Change Directory
        run: cd bindings/ceylon
      - name: Install Libs
        run: |
          pip install uniffi-bindgen
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter -m bindings/ceylon/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}-py${{ matrix.python-version }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Change Directory
        run: cd bindings/ceylon
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist  -m bindings/ceylon/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  macos:
    if: "startsWith(github.ref, 'refs/tags/')"
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-14
            target: aarch64
        python-version: [ '3.8', '3.9', '3.10', '3.11','3.12' ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Change Directory
        run: cd bindings/ceylon
      - name: Install Libs
        run: |
          pip install uniffi-bindgen
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter   -m bindings/ceylon/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}-py${{ matrix.python-version }}
          path: dist
  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          [
            { version: "3.8", abi: "cp38-cp38" },
            { version: "3.9", abi: "cp39-cp39" },
            { version: "3.10", abi: "cp310-cp310" },
            { version: "3.11", abi: "cp311-cp311" },
            { version: "3.12", abi: "cp312-cp312" },
          ]
        target: [ armv7l]
    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config build-essential zlib1g-dev

      - name: Build OpenSSL from source
        run: |
          wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz
          tar xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib no-async
          make -j $(nproc)
          sudo make install
          echo "OPENSSL_DIR=/usr/local/ssl" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/ssl/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Set up cross-compilation toolchain
        run: |
          sudo apt-get install -y gcc-multilib
          case ${{ matrix.target }} in
            i686)
              sudo apt-get install -y gcc-i686-linux-gnu
              echo "CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=i686-linux-gnu-gcc" >> $GITHUB_ENV
              echo "TARGET_TRIPLE=i686-unknown-linux-gnu" >> $GITHUB_ENV
              ;;
            aarch64)
              sudo apt-get install -y gcc-aarch64-linux-gnu
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "TARGET_TRIPLE=aarch64-unknown-linux-gnu" >> $GITHUB_ENV
              ;;
            armv7l)
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              echo "CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
              echo "TARGET_TRIPLE=armv7-unknown-linux-gnueabihf" >> $GITHUB_ENV
              ;;
            s390x)
              sudo apt-get install -y gcc-s390x-linux-gnu
              echo "CARGO_TARGET_S390X_UNKNOWN_LINUX_GNU_LINKER=s390x-linux-gnu-gcc" >> $GITHUB_ENV
              echo "TARGET_TRIPLE=s390x-unknown-linux-gnu" >> $GITHUB_ENV
              ;;
            ppc64le)
              sudo apt-get install -y gcc-powerpc64le-linux-gnu
              echo "CARGO_TARGET_POWERPC64LE_UNKNOWN_LINUX_GNU_LINKER=powerpc64le-linux-gnu-gcc" >> $GITHUB_ENV
              echo "TARGET_TRIPLE=powerpc64le-unknown-linux-gnu" >> $GITHUB_ENV
              ;;
            *)
              echo "TARGET_TRIPLE=${{ matrix.target }}-unknown-linux-gnu" >> $GITHUB_ENV
              ;;
          esac

      - name: Add Rust target
        run: rustup target add ${{ env.TARGET_TRIPLE }}

      - name: Build Wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_LIB_DIR: /opt/python/${{ matrix.python.abi }}/lib
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
        with:
          target: ${{ env.TARGET_TRIPLE }}
          manylinux: auto
          args: -i python${{matrix.python.version}} --release --out dist -m bindings/ceylon/Cargo.toml


      - name: Install and test wheel
        uses: uraimo/run-on-arch-action@v2.5.0
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt-get update -y
            apt-get install -y gcc musl-dev python3-dev libssl-dev pkg-config
            apt-get install -y --no-install-recommends software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update -y
            PYTHON=python${{ matrix.python.version }}
            apt-get install -y $PYTHON $PYTHON-distutils $PYTHON-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python.version }}
            $PYTHON --version
            $PYTHON -m venv venv
            . venv/bin/activate
            pip install --upgrade pip setuptools wheel
            pip install --force-reinstall /artifacts/ceylon*.whl
            cd ~ && python -c 'import ceylon; print(ceylon.__file__)'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-py${{ matrix.python.version }}
          path: dist
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ linux-cross ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *